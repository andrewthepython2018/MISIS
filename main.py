import re
import io
import ast
import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st

st.set_page_config(page_title="NL ‚Üí Plot (RU)", page_icon="üìä", layout="wide")

# ===================== Utilities =====================

def load_csv(uploaded_file):
    if uploaded_file is None:
        return None
    try:
        return pd.read_csv(uploaded_file)
    except Exception:
        uploaded_file.seek(0)
        return pd.read_csv(io.StringIO(uploaded_file.getvalue().decode("utf-8", errors="ignore")))

def safe_eval_expr(expr: str):
    allowed_ops = (ast.Eq, ast.NotEq, ast.Gt, ast.GtE, ast.Lt, ast.LtE)
    allowed_unary = (ast.USub, ast.UAdd, ast.Not)
    try:
        node = ast.parse(expr, mode="eval")
    except Exception as e:
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
    class Checker(ast.NodeVisitor):
        def visit_Attribute(self, n): raise ValueError("–ê—Ç—Ä–∏–±—É—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ —Ñ–∏–ª—å—Ç—Ä–µ.")
        def visit_Call(self, n): raise ValueError("–í—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ —Ñ–∏–ª—å—Ç—Ä–µ.")
        def visit_Compare(self, n):
            for op in n.ops:
                if not isinstance(op, allowed_ops):
                    raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        def visit_BinOp(self, n):
            if not isinstance(n.op, (ast.BitAnd, ast.BitOr)):
                raise ValueError("–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ & –∏ | –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.")
        def visit_UnaryOp(self, n):
            if not isinstance(n.op, allowed_unary):
                raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —É–Ω–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.")
    Checker().visit(node)
    return True

def apply_filter(df: pd.DataFrame, filt: str) -> pd.DataFrame:
    if not filt or not filt.strip():
        return df
    safe_eval_expr(filt)
    try:
        return df.query(filt)
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

PLOT_SYNONYMS = {
    "hist": ["–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞","–≥–∏—Å—Ç","—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ","—Ä–∞—Å–ø—Ä–µ–¥","histogram","hist"],
    "scatter": ["—Ä–∞—Å—Å–µ—è–Ω–∏–µ","—Ç–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞","–¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è","scatter","—Å–∫–∞—Ç—Ç–µ—Ä"],
    "line": ["–ª–∏–Ω–µ–π–Ω—ã–π","–ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫","–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥","line","time series","–ª–∏–Ω–∏—è"],
    "bar": ["—Å—Ç–æ–ª–±—á–∞—Ç—ã–π","—Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞","–±–∞—Ä—á–∞—Ä—Ç","bar","–∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è","–∫–∞—Ç–µ–≥–æ—Ä–Ω—ã–π"],
}

def match_plot_type(text_lower: str):
    for plot, keys in PLOT_SYNONYMS.items():
        for k in keys:
            if k in text_lower:
                return plot
    if "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏" in text_lower: return "hist"
    if "—Ç–æ—á–µ—á–Ω" in text_lower: return "scatter"
    if "–≤—Ä–µ–º–µ–Ω–Ω" in text_lower: return "line"
    if "—Å—Ç–æ–ª–±—Ü" in text_lower or "–∫–∞—Ç–µ–≥–æ—Ä" in text_lower: return "bar"
    return None

def parse_prompt_ru(text: str) -> dict:
    if not text:
        text = ""
    t = text.strip()
    t_low = t.lower()

    plot_type = match_plot_type(t_low)

    def get_val(patterns, src):
        for p in patterns:
            m = re.search(p, src, flags=re.IGNORECASE)
            if m:
                return m.group(1).strip()
        return None

    name_re = r"[a-zA-Z–∞-—è–ê-–Ø0-9_]+"
    x = get_val([rf"x\s*=\s*({name_re})"], t)
    y = get_val([rf"y\s*=\s*({name_re})"], t)
    col = get_val([rf"col\s*=\s*({name_re})", rf"–ø–æ —Å—Ç–æ–ª–±—Ü—É\s+({name_re})"], t)
    bins = get_val([r"bins\s*=\s*([0-9]+)", r"–±–∏–Ω[—Å–∑]?\s*=\s*([0-9]+)", r"–±–∏–Ω–æ–≤\s*=\s*([0-9]+)"], t)

    filt = None
    m_where = re.search(r"(?:where|–≥–¥–µ)\s+(.+)$", t, flags=re.IGNORECASE)
    if m_where:
        filt = m_where.group(1).strip()

    m_auto = re.search(r"—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏[–µ—è]\s+([a-z–∞-—è0-9_]+)", t, flags=re.IGNORECASE)
    if m_auto and not (col or x or y):
        col = m_auto.group(1).strip()

    return {
        "plot": plot_type,
        "x": x,
        "y": y,
        "col": col,
        "bins": int(bins) if bins else None,
        "filter": filt
    }

def render_plot(df: pd.DataFrame, plan: dict):
    if plan["filter"]:
        df = apply_filter(df, plan["filter"])
    plot = plan["plot"]
    if plot is None:
        st.warning("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞. –°–∫–∞–∂–∏: –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ / —Ä–∞—Å—Å–µ—è–Ω–∏–µ / –ª–∏–Ω–µ–π–Ω—ã–π / —Å—Ç–æ–ª–±—á–∞—Ç—ã–π.")
        return

    fig = plt.figure(figsize=(7, 4.5))

    if plot == "hist":
        col = plan["col"] or plan["x"] or plan["y"]
        if not col:
            st.error("–î–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —É–∫–∞–∂–∏ —Å—Ç–æ–ª–±–µ—Ü: '–ø–æ —Å—Ç–æ–ª–±—Ü—É age' –∏–ª–∏ 'col=age'."); return
        if col not in df.columns:
            st.error(f"–°—Ç–æ–ª–±–µ—Ü '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö."); return
        df[col].dropna().plot(kind="hist", bins=plan["bins"] or 20)
        plt.xlabel(col); plt.ylabel("–ß–∞—Å—Ç–æ—Ç–∞"); plt.title(f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {col}")
        st.pyplot(fig)

    elif plot == "scatter":
        if not plan["x"] or not plan["y"]:
            st.error("–î–ª—è —Ä–∞—Å—Å–µ—è–Ω–∏—è —É–∫–∞–∂–∏ x=‚Ä¶ –∏ y=‚Ä¶"); return
        if plan["x"] not in df.columns or plan["y"] not in df.columns:
            st.error("–°—Ç–æ–ª–±—Ü—ã –¥–ª—è x/y –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."); return
        plt.scatter(df[plan["x"]], df[plan["y"]], alpha=0.7)
        plt.xlabel(plan["x"]); plt.ylabel(plan["y"]); plt.title(f"–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è: {plan['x']} vs {plan['y']}")
        st.pyplot(fig)

    elif plot == "line":
        if not plan["x"] or not plan["y"]:
            st.error("–î–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —É–∫–∞–∂–∏ x=‚Ä¶ –∏ y=‚Ä¶"); return
        if plan["x"] not in df.columns or plan["y"] not in df.columns:
            st.error("–°—Ç–æ–ª–±—Ü—ã –¥–ª—è x/y –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."); return
        plt.plot(df[plan["x"]], df[plan["y"]])
        plt.xlabel(plan["x"]); plt.ylabel(plan["y"]); plt.title(f"–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {plan['y']} –ø–æ {plan['x']}")
        st.pyplot(fig)

    elif plot == "bar":
        if plan["x"] and plan["y"]:
            x, y = plan["x"], plan["y"]
            if x not in df.columns or y not in df.columns:
                st.error("–°—Ç–æ–ª–±—Ü—ã –¥–ª—è x/y –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."); return
            if pd.api.types.is_numeric_dtype(df[y]):
                agg = df.groupby(x)[y].mean().sort_values(ascending=False)
                agg.plot(kind="bar")
                plt.xlabel(x); plt.ylabel(f"mean({y})"); plt.title(f"–°—Ç–æ–ª–±—á–∞—Ç—ã–π: —Å—Ä–µ–¥–Ω–µ–µ {y} –ø–æ {x}")
                st.pyplot(fig)
            else:
                cnt = df.groupby([x, y]).size().unstack(fill_value=0).sum(axis=1).sort_values(ascending=False)
                cnt.plot(kind="bar")
                plt.xlabel(x); plt.ylabel("–ß–∞—Å—Ç–æ—Ç–∞"); plt.title(f"–°—Ç–æ–ª–±—á–∞—Ç—ã–π: —á–∞—Å—Ç–æ—Ç—ã –ø–æ {x}")
                st.pyplot(fig)
        elif plan["x"]:
            x = plan["x"]
            if x not in df.columns:
                st.error("–°—Ç–æ–ª–±–µ—Ü –¥–ª—è x –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
            cnt = df[x].value_counts()
            cnt.plot(kind="bar")
            plt.xlabel(x); plt.ylabel("–ß–∞—Å—Ç–æ—Ç–∞"); plt.title(f"–°—Ç–æ–ª–±—á–∞—Ç—ã–π: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {x}")
            st.pyplot(fig)
        else:
            st.error("–î–ª—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–≥–æ —É–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã x=‚Ä¶")
    else:
        st.error(f"–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω: {plot}")

def generate_python_code(plan: dict) -> str:
    lines = []
    lines.append("import pandas as pd")
    lines.append("import matplotlib.pyplot as plt")
    lines.append("")
    if plan.get("filter"):
        lines.append(f"df_plot = df.query({plan['filter']!r})")
    else:
        lines.append("df_plot = df.copy()")
    lines.append("plt.figure(figsize=(7, 4.5))")
    p = plan.get("plot")

    if p == "hist":
        col = plan.get("col") or plan.get("x") or plan.get("y") or "–í–ê–®_–°–¢–û–õ–ë–ï–¶"
        bins = plan.get("bins") or 20
        lines += [
            f"df_plot[{col!r}].dropna().plot(kind='hist', bins={bins})",
            f"plt.xlabel({col!r})",
            "plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')",
            f"plt.title(f'–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {col}')",
        ]
    elif p == "scatter":
        x = plan.get("x") or "X"
        y = plan.get("y") or "Y"
        lines += [
            f"plt.scatter(df_plot[{x!r}], df_plot[{y!r}], alpha=0.7)",
            f"plt.xlabel({x!r}); plt.ylabel({y!r})",
            f"plt.title(f'–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è: {x} vs {y}')",
        ]
    elif p == "line":
        x = plan.get("x") or "X"
        y = plan.get("y") or "Y"
        lines += [
            f"plt.plot(df_plot[{x!r}], df_plot[{y!r}])",
            f"plt.xlabel({x!r}); plt.ylabel({y!r})",
            f"plt.title(f'–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {y} –ø–æ {x}')",
        ]
    elif p == "bar":
        x = plan.get("x")
        y = plan.get("y")
        if x and y:
            lines += [
                f"x, y = {x!r}, {y!r}",
                "if pd.api.types.is_numeric_dtype(df_plot[y]):",
                "    agg = df_plot.groupby(x)[y].mean().sort_values(ascending=False)",
                "    agg.plot(kind='bar')",
                "    plt.xlabel(x); plt.ylabel(f'mean({y})')",
                "    plt.title(f'–°—Ç–æ–ª–±—á–∞—Ç—ã–π: —Å—Ä–µ–¥–Ω–µ–µ {y} –ø–æ {x}')",
                "else:",
                "    cnt = df_plot.groupby([x, y]).size().unstack(fill_value=0).sum(axis=1).sort_values(ascending=False)",
                "    cnt.plot(kind='bar')",
                "    plt.xlabel(x); plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')",
                "    plt.title(f'–°—Ç–æ–ª–±—á–∞—Ç—ã–π: —á–∞—Å—Ç–æ—Ç—ã –ø–æ {x}')",
            ]
        elif x:
            lines += [
                f"x = {x!r}",
                "cnt = df_plot[x].value_counts()",
                "cnt.plot(kind='bar')",
                "plt.xlabel(x); plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')",
                "plt.title(f'–°—Ç–æ–ª–±—á–∞—Ç—ã–π: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {x}')",
            ]
        else:
            lines.append("# –î–ª—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã x=...")
    else:
        lines.append("# –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
    lines.append("plt.show()")
    return "\n".join(lines)

# ===================== UI: Sidebar =====================

st.sidebar.title("üîß –†–µ–∂–∏–º—ã")
mode = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", [
    "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (NL‚ÜíPlot)",
    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî WIP",
    "–†–µ–≥—Ä–µ—Å—Å–∏—è ‚Äî WIP",
    "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è ‚Äî WIP",
    "–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ‚Äî WIP"
])
st.sidebar.markdown("---")
uploaded = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", type=["csv"])
use_demo = st.sidebar.toggle("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ", value=(uploaded is None))

# ===================== Data =====================

if use_demo:
    df = pd.DataFrame({
        "age": np.random.normal(22, 3, 400).round(0).astype(int),
        "study_hours": np.clip(np.random.normal(12, 5, 400), 0, None).round(1),
        "score": np.clip(np.random.normal(74, 11, 400), 0, 100).round(1),
        "height": np.random.normal(170, 8, 400).round(1),
        "weight": np.random.normal(65, 7, 400).round(1),
        "city": np.random.choice(["Tashkent","Samarkand","Bukhara"], 400),
        "subject": np.random.choice(["Math","Stats","CS"], 400),
    })
    df["passed"] = (df["score"] >= 60).astype(int)
else:
    df = load_csv(uploaded)
    if df is None:
        st.stop()

st.caption(f"–î–∞–Ω–Ω—ã–µ: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
st.dataframe(df.head(10), use_container_width=True)

# ===================== Main: only first mode active =====================

if mode != "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (NL‚ÜíPlot)":
    st.header(mode)
    st.info("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (Work in Progress).")
    st.stop()

st.header("üí¨ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ ‚Üí –≥—Ä–∞—Ñ–∏–∫")
st.markdown(
    """
**–¢–∏–ø—ã:** –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞, —Ä–∞—Å—Å–µ—è–Ω–∏–µ (—Ç–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞), –ª–∏–Ω–µ–π–Ω—ã–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥), —Å—Ç–æ–ª–±—á–∞—Ç—ã–π.  
**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:** `x=`, `y=`, `col=`, `–±–∏–Ω—Å=10` (–∏–ª–∏ `bins=10`).  
**–§–∏–ª—å—Ç—Ä:** `–≥–¥–µ ...` (–∏–ª–∏ `where ...`) ‚Äî –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ `pandas.query`, –Ω–∞–ø—Ä.: `–≥–¥–µ city == 'Tashkent' & age >= 20`.
"""
)

# ---- Input row: two columns; OUTPUTS will be rendered FULL-WIDTH below ----
col_left, col_right = st.columns([1,1], vertical_alignment="top")

with col_left:
    st.markdown("**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**")
    st.code(
        "–ø–æ—Å—Ç—Ä–æ–π –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –ø–æ —Å—Ç–æ–ª–±—Ü—É score, –±–∏–Ω—Å=30\n"
        "–Ω–∞—á–µ—Ä—Ç–∏ —Ç–æ—á–µ—á–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É: x=height y=weight –≥–¥–µ city == 'Samarkand'\n"
        "–ø–æ–∫–∞–∂–∏ –ª–∏–Ω–µ–π–Ω—ã–π x=age y=score –≥–¥–µ subject == 'Math'\n"
        "–≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–æ–ª–±—á–∞—Ç—ã–π x=city\n"
        "–Ω–∞—Ä–∏—Å—É–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ score –±–∏–Ω–æ–≤=40 –≥–¥–µ subject == 'CS'\n"
        "—Å–¥–µ–ª–∞–π –≥—Ä–∞—Ñ–∏–∫: —Å—Ç–æ–ª–±—á–∞—Ç—ã–π x=subject y=score –≥–¥–µ score >= 80\n"
        "–≤—ã–≤–µ–¥–∏ –¥–∏–∞–≥—Ä–∞–º–º—É: —Ä–∞—Å—Å–µ—è–Ω–∏–µ x=height y=weight",
        language="text"
    )

with col_right:
    default_prompt = "–ø–æ—Å—Ç—Ä–æ–π –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –ø–æ —Å—Ç–æ–ª–±—Ü—É age, –±–∏–Ω—Å=25 –≥–¥–µ subject == 'Math'"
    prompt = st.text_area("–û–ø–∏—à–∏ –Ω—É–∂–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫:",
                          value=default_prompt, height=120)

    # button stores result in session, outputs are below columns (full-width)
    if st.button("–°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"):
        try:
            plan = parse_prompt_ru(prompt)
            code_text = generate_python_code(plan)
            st.session_state["nl_plot_result"] = {"plan": plan, "code": code_text}
        except Exception as e:
            st.session_state["nl_plot_result"] = {"error": str(e)}

# ---- FULL-WIDTH OUTPUT SECTION ----
st.markdown("---")
res = st.session_state.get("nl_plot_result")
if res:
    if "error" in res:
        st.error(res["error"])
    else:
        st.subheader("–ü–ª–∞–Ω (JSON)")
        st.code(json.dumps(res["plan"], ensure_ascii=False, indent=2), language="json")

        st.subheader("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ (–∫–∞–∫ –µ—Å–ª–∏ –±—ã –ø–∏—Å–∞–ª–∏ –≤—Ä—É—á–Ω—É—é)")
        st.code(res["code"], language="python")

        st.subheader("–ì—Ä–∞—Ñ–∏–∫")
        try:
            render_plot(df, res["plan"])
        except Exception as e:
            st.error(str(e))
else:
    st.info("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–ª–∞–Ω, –∫–æ–¥ –∏ –≥—Ä–∞—Ñ–∏–∫.")
